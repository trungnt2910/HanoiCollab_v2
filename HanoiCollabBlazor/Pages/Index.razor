@page "/"

@using HanoiCollab.Models
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using blazejewicz.Blazor.BeforeUnload

@implements IAsyncDisposable

@inject IdentityService _identityService
@inject NavigationManager _navigationManager
@inject BeforeUnload _beforeUnload

<PageTitle>HanoiCollab</PageTitle>

<h1>HanoiCollab live exam viewer</h1>

<div class="form-horizontal">
    <p class="form-text">
        Please select an exam id.
        The exam id should be a value present on your exam link,
        depending on your exam provider.
        <br/>
        Please note that only active exams appear here.
    </p>
    <RadzenDropDown AllowClear="@false" TValue="@string" class="w-100 m-2" Placeholder="Select an exam to continue..." Data="@ActiveExams" Change="(value) => _selectedExam = (string)value" />
    <button class="btn btn-primary" disabled="@PrimaryButtonDisabled" @onclick="ConnectButton_Click">Connect!</button>
    <button class="btn btn-secondary" @onclick="ReloadButton_Click">Reload</button>
</div>

<ExamView @ref="ExamView" ExamLayout="@ExamLayout"/>

@code
{
    private List<string> _activeExams;
    List<string> ActiveExams 
    {
        get => _activeExams;
        set
        {
            _activeExams = value;
            StateHasChanged();
        }
    }
    private string _activeExam;
    private string _activeBroadcastId;
    private string[] _activeBroadcastChunks;
    private int _activeBroadcastChunksLeft;
    private string _selectedExam;
    object SelectedExam 
    {
        get => _selectedExam;
        set
        {
            _selectedExam = (string)value;
            StateHasChanged();
        }
    }
    bool PrimaryButtonDisabled => string.IsNullOrEmpty(_selectedExam);

    private ExamLayout _examLayout;
    ExamLayout ExamLayout
    {
        get => _examLayout;
        set
        {
            _examLayout = value;
            StateHasChanged();
        }
    }

    ExamView ExamView { get; set; }

    private HubConnection _connection;

    protected override async Task OnInitializedAsync()
    {
        await SetupConnection();

        _identityService.IdentityChanged += async (s, a) => await SetupConnection();
        _beforeUnload.BeforeUnloadHandler += BeforeUnloadHandler;

        await base.OnInitializedAsync();
    }

    private async Task SetupConnection()
    {
        if (_connection != null)
        {
            await _connection.StopAsync();
            await _connection.DisposeAsync();
        }
        _connection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/hubs/exam"), options =>
            {
                options.AccessTokenProvider = async () => (await _identityService.GetIdentityAsync()).Token;
            })
            .WithAutomaticReconnect(new SpamRetryPolicy())
            .Build();

        _connection.On<string, ExamLayout>("BroadcastExamLayout", UpdateExamLayout);
        _connection.On<string, string, int, int, string>("BroadcastExamLayoutPartial", ReceiveExamLayout);

        _connection.On<List<Question>>("InitializeExam", InitializeExam);
        _connection.On<QuestionUpdateInfo>("ReceiveAnswer", ReceiveAnswer);

        await _connection.StartAsync();
        Console.WriteLine("Established connection to HanoiCollab's ExamHub.");
        ActiveExams = await _connection.InvokeAsync<List<string>>("GetActiveExams");
    }

    private async void ReloadButton_Click(MouseEventArgs args)
    {
        ActiveExams = await _connection.InvokeAsync<List<string>>("GetActiveExams");
    }

    private async void ConnectButton_Click(MouseEventArgs args)
    {
        _activeExam = _selectedExam;
        await _connection.SendAsync("RequestExamLayout", _selectedExam);
    }

    private async Task ReceiveExamLayout(string examId, string broadcastId, int chunkIndex, int totalChunks, string data)
    {
        if (examId != _activeExam)
        {
            return;
        }
        if (_activeBroadcastId != null && _activeBroadcastId != broadcastId)
        {
            return;
        }
        if (_activeBroadcastId == null)
        {
            _activeBroadcastId = broadcastId;
            _activeBroadcastChunks = new string[totalChunks];
            _activeBroadcastChunksLeft = totalChunks;
        }
        if (_activeBroadcastChunks[chunkIndex] == null)
        {
            _activeBroadcastChunks[chunkIndex] = data;
            --_activeBroadcastChunksLeft;
        }
        if (_activeBroadcastChunksLeft == 0)
        {
            await UpdateExamLayout(examId, JsonSerializer.Deserialize<ExamLayout>(string.Join("", _activeBroadcastChunks)));
        }
    }

    private async Task UpdateExamLayout(string examId, ExamLayout questions)
    {
        if (examId != _activeExam)
        {
            return;
        }

        _activeBroadcastId = null;        
        _activeBroadcastChunks = null;
        _activeBroadcastChunksLeft = 0;

        ExamLayout = questions;
        await _connection.InvokeAsync("JoinExam", examId);
    }

    private void InitializeExam(List<Question> onlineQuestions)
    {
        foreach (var q in onlineQuestions)
        {
            ExamView.ReceiveQuestionUpdate(q);
        }
    }

    private void ReceiveAnswer(QuestionUpdateInfo onlineQuestion)
    {
        ExamView.ReceiveQuestionUpdate(onlineQuestion);
    }

    private class SpamRetryPolicy : IRetryPolicy
    {
        private int _currentRetrySeconds = 1;

        public TimeSpan? NextRetryDelay(RetryContext retryContext)
        {
            var nextTimeSpan = TimeSpan.FromSeconds(_currentRetrySeconds);
            _currentRetrySeconds = Math.Min(_currentRetrySeconds * 2, 16);
            return nextTimeSpan;
        }
    }

    private async Task DisposeConnections()
    {
        if (_activeExam != null)
        {
            await _connection.InvokeAsync("LeaveExam", _activeExam);
        }
        await _connection.StopAsync();
        await _connection.DisposeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await DisposeConnections();
        _beforeUnload.BeforeUnloadHandler -= BeforeUnloadHandler;
    }

    private async void BeforeUnloadHandler(object sender, BeforeUnloadArgs args)
    {
        await DisposeConnections();
    }
}