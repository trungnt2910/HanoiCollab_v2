@using HanoiCollab.Models
@inherits LayoutComponentBase

@inject IdentityService _identityService
@inject HttpClient _http

<div class="page">

    <main>
        <nav class="top-row fixed-top navbar navbar-expand-md navbar-dark">
            <a class="navbar-brand d-flex mr-auto" href="">HanoiCollab</a>
            <button class="navbar-toggler" type="button" @onclick="() => _navbarShow = !_navbarShow">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="@_navbarClass navbar-collapse w-100">
            <ul class="navbar-nav w-100 justify-content-start">
                <li class="nav-item active">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
            </ul>
            <ul class="navbar-nav w-100 ml-auto justify-content-end">
                <li>
                    <div class="d-flex w-100 justify-content-end">
                        <p class="m-2 text-white text-center">@_accountDisplayText</p>
                        <button class="btn btn-primary" data-toggle="modal" @onclick="() => _modal.Open()">Switch Account</button>
                    </div>
                </li>
            </ul>
            </div>
        </nav>

        <Modal @ref="_modal" ShowCloseButton="@_modalShowCloseButton">
            <Title>Log in/Sign up</Title>
            <Body>
                <p class="text-center">Please log in to use HanoiCollab</p>
                <form class="form-horizontal">
                    <div class="form-group">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text h-100"><i class="oi oi-person"></i></span>
                            </div>
                            <input @bind="_username" @oninput="(e) => {_username = (string)e.Value;}" id="username" type="text" class="form-control" name="username" placeholder="Username">
                        </div>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text h-100"><i class="oi oi-key"></i></span>
                            </div>
                            <input @bind="_password" @oninput="(e) => {_password = (string)e.Value;}" id="password" type="password" class="form-control" name="password" placeholder="Password">
                        </div>
                    </div>
                </form>
                <p class="text-@_statusType">@_statusText</p>
            </Body>
            <Footer>
                <button type="button" class="btn btn-primary" @onclick="async () => {try{await LogIn();}catch{}}">Log in</button>
                <button type="button" class="btn btn-primary" @onclick="async () => {try{await SignUp();}catch{}}">Sign up</button>
            </Footer>
        </Modal>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    private Modal _modal { get; set; }
    private bool _modalShowCloseButton_field = false;
    private bool _modalShowCloseButton 
    {
        get => _modalShowCloseButton_field;
        set
        {
            _modalShowCloseButton_field = value;
            StateHasChanged();
        }
    }
    private string _activeUsername { get; set; }
    private string _accountDisplayText => string.IsNullOrEmpty(_activeUsername) ? "" : $"Hi, {_activeUsername}!";
    private string _username { get; set; }
    private string _password { get; set; }
    private string _statusType { get; set; } = "info";
    private string _statusText { get; set; }
    private bool _navbarShow { get; set; } = false;
    private string _navbarClass => _navbarShow ? "" : "collapse";
    private TaskCompletionSource<Identity> _loginTcs;
    private object _loginLock = new();

    protected override async Task OnInitializedAsync()
    {
        _activeUsername = await _identityService.GetUsernameAsync();
        _username = _activeUsername;
        _identityService.IdentityExpired += (Func<object, IdentityExpiredEventArgs, Task>)OnIdentityExpired;
        _ = _identityService.GetIdentityAsync();
        _modalShowCloseButton = true;
        await base.OnInitializedAsync();
    }

    private Task OnIdentityExpired(object sender, IdentityExpiredEventArgs args)
    {
        lock (_loginLock)
        {
            if (_loginTcs != null)
            {
                return _loginTcs.Task.ContinueWith((t) =>
                {
                    args.NewIdentity = t.Result;
                });
            }
            _loginTcs = new TaskCompletionSource<Identity>();
        }

        _modalShowCloseButton = false;
        _modal.Open();

        return _loginTcs.Task.ContinueWith((t) =>
        {
            args.NewIdentity = t.Result;
        });
    }

    private async Task LogIn()
    {
        var login = GetLoginObject();
        var response = await _http.PostAsJsonAsync("api/Accounts/login", login);
        try
        {
            if (response.IsSuccessStatusCode)
            {
                var identity = await response.Content.ReadFromJsonAsync<Identity>();
                if (!(_loginTcs?.Task.IsCompleted ?? false))
                {
                    await _identityService.SetIdentityAsync(identity);
                }
                _loginTcs?.SetResult(identity);
                _loginTcs = null;
                _activeUsername = login.Name;
                await _identityService.SetUsernameAsync(_activeUsername);
                _modalShowCloseButton = true;
                _modal.Close();
            }
            else
            {
                _statusType = "danger";
                _statusText = response.ReasonPhrase;
            }
        }
        catch (Exception e)
        {
            _statusType = "danger";
            _statusText = e.Message;
        }
    }

    private async Task SignUp()
    {
        var login = GetLoginObject();
        var response = await _http.PostAsJsonAsync("api/Accounts/register", login);
        try
        {
            if ((response.Content.Headers.ContentLength ?? 0L) > 0)
            {
                var serverResponse = await response.Content.ReadFromJsonAsync<Response>();
                if (serverResponse.Status == "Success")
                {
                    _statusType = "success";                    
                }
                else if (serverResponse.Status == "Error")
                {
                    _statusType = "danger";
                }
                else
                {
                    _statusType = "info";
                }
                _statusText = $"{serverResponse.Status}: {serverResponse.Message}";
            }
            else
            {
                _statusType = "danger";
                _statusText = response.ReasonPhrase;
            }
        }
        catch (Exception e)
        {
            _statusType = "danger";
            _statusText = e.Message;
        }

    }

    private Login GetLoginObject()
    {
        if (string.IsNullOrEmpty(_username))
        {
            _statusType = "danger";
            _statusText = "Please enter your username.";
            throw new InvalidOperationException();
        }
        if (string.IsNullOrEmpty(_password))
        {

            _statusType = "danger";
            _statusText = "Please enter your password.";
            throw new InvalidOperationException();
        }
        return new Login()
        {
            Name = _username,
            Password = _password
        };
    }
}